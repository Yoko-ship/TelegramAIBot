import telebot
import google.generativeai as genai
import os
from PIL import Image
import requests
from io import BytesIO
from pptx import Presentation
import mimetypes
from flask import Flask, request

app = Flask(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
API_TOKEN = "7429366923:AAHGpTLn2wjz7S1jr01ttdj-_Vmz00ma3l8"
bot = telebot.TeleBot(API_TOKEN)

# –ì–µ–Ω–µ—Ä–∞—Ç–∏–≤–Ω—ã–π AI
apiKey = "AIzaSyCrj3saz9DtSmuesXjHKLR7HIAxRJD3RrY"
genai.configure(api_key=apiKey)
model = genai.GenerativeModel("gemini-1.5-flash")

@app.route('/setup_webhook', methods=["GET", "POST"])
def setup_webhook():
    bot.remove_webhook()  # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –≤–µ–±—Ö—É–∫
    bot.set_webhook("webhook")  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π –≤–µ–±—Ö—É–∫
    return "Webhook setup"

@app.route('/webhook', methods=["POST"])
def webhook():
    json_str = request.get_data(as_text=True)  # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç Telegram
    update = telebot.types.Update.de_json(json_str)  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç Update
    bot.process_new_updates([update])  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    return "OK"

def presentation_to_text(path_file):
    try:
        prs = Presentation(path_file)
        text = []
        for slide in prs.slides:
            for shape in slide.shapes:
                if hasattr(shape, "text"):
                    text.append(shape.text)
        return "\n".join(text)
    except Exception:
        return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞ –∏–∑ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏."

@bot.message_handler(content_types=["text", "document"])
def get_text_messages(message):
    if message.text == "–ü—Ä–∏–≤–µ—Ç":
        bot.send_message(message.from_user.id, "–ü—Ä–∏–≤–µ—Ç —á–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å")
    elif message.text in ["–ö–∞–∫ –¥–µ–ª–∞", "–ö–∞–∫ –¥–µ–ª–∞?"]:
        bot.send_message(message.from_user.id, "–£ –º–µ–Ω—è –≤—Å–µ –æ—Ç–ª–∏—á–Ω–æ, –∫–∞–∫ —É —Ç–µ–±—è?")
    elif message.text == "/help":
        bot.send_message(message.from_user.id, "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: /help, /info, /image, /pdf, /present")
    elif message.text == "/image":
        bot.send_message(message.from_user.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
        bot.register_next_step_handler(message, get_url)
    elif message.text == "/info":
        bot.send_message(message.from_user.id, "–Ø —Ç—É—Ç, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å! ü´° –ù–µ —Å—Ç–µ—Å–Ω—è–π—Å—è —Å–ø—Ä–∞—à–∏–≤–∞—Ç—å.")
    elif message.text == "/present":
        bot.send_message(message.from_user.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é.")
        bot.register_next_step_handler(message, present_handler)
    elif message.text == "/pdf":
        bot.send_message(message.from_user.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ PDF —Ñ–∞–π–ª.")
        bot.register_next_step_handler(message, pdf_handler)
    else:
        try:
            response = model.generate_content(message.text)
            bot.send_message(message.from_user.id, response.text.replace("*", ""))
        except Exception as e:
            bot.send_message(message.from_user.id, f"–û—à–∏–±–∫–∞: {e}")

def get_url(message):
    url = message.text
    if url == "/stop":
        bot.reply_to(message, "–í—ã –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ —Ñ—É–Ω–∫—Ü–∏—é.")
        bot.register_next_step_handler(message, get_text_messages)
        return

    try:
        response_url = requests.get(url)
        picture_describe = Image.open(BytesIO(response_url.content))
        response_chat = model.generate_content(["–û–ø–∏—à–∏ —ç—Ç—É –∫–∞—Ä—Ç–∏–Ω–∫—É –Ω–∞ —Ä—É—Å—Å–∫–æ–º", picture_describe])
        bot.send_message(message.from_user.id, response_chat.text)
    except Exception as e:
        bot.send_message(message.from_user.id, f"–û—à–∏–±–∫–∞: –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π URL –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞. {e}")
        bot.register_next_step_handler(message, get_url)

def present_handler(message):
    if message.text == "/stop":
        bot.reply_to(message, "–í—ã –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ —Ñ—É–Ω–∫—Ü–∏—é.")
        bot.register_next_step_handler(message, get_text_messages)
        return

    try:
        file_info = bot.get_file(message.document.file_id)
        downloaded_file = bot.download_file(file_info.file_path)

        file_name = message.document.file_name
        with open(file_name, "wb") as new_file:
            new_file.write(downloaded_file)

        pdfto_text = presentation_to_text(file_name)
        response = model.generate_content(["–û–ø–∏—à–∏ —ç—Ç–æ –∫—Ä–∞—Ç–∫–æ, –Ω–æ –ø–æ–¥—Ä–æ–±–Ω–æ, –∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏", pdfto_text])
        bot.send_message(message.from_user.id, response.text.replace("*", ""))
    except Exception as e:
        bot.send_message(message.from_user.id, f"–û—à–∏–±–∫–∞: {e}")

def pdf_handler(message):
    if message.text == "/stop":
        bot.reply_to(message, "–í—ã –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ —Ñ—É–Ω–∫—Ü–∏—é.")
        bot.register_next_step_handler(message, get_text_messages)
        return

    try:
        pdf_info = bot.get_file(message.document.file_id)
        downloaded_pdf = bot.download_file(pdf_info.file_path)
        pdf_name = message.document.file_name

        with open(pdf_name, "wb") as new_pdf:
            new_pdf.write(downloaded_pdf)

        mime_type, _ = mimetypes.guess_type(pdf_name)
        if mime_type is None:
            mime_type = "application/pdf"

        with open(pdf_name, "rb") as pdf_file:
            sample_pdf = genai.upload_file(pdf_file, mime_type=mime_type)

        response = model.generate_content(["–û–ø–∏—à–∏ —ç—Ç–æ –∫—Ä–∞—Ç–∫–æ, –Ω–æ –ø–æ–¥—Ä–æ–±–Ω–æ, –∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏", sample_pdf])
        bot.send_message(message.from_user.id, response.text.replace("*", ""))
    except Exception as e:
        bot.reply_to(message, f"–û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    bot.polling(none_stop=True)
