import telebot;
import google.generativeai as genai
import os
from PIL import Image
import requests
from io import BytesIO
from pptx import Presentation
import mimetypes


apiKey = os.getenv("TELEGRAM_TOKEN")
genai.configure(api_key=apiKey)
model = genai.GenerativeModel("gemini-1.5-flash")

def presentationToText(pathFile,message):
    try:

        prs = Presentation(pathFile)
        text = []
        for slide in prs.slides:
            for shape in slide.shapes:
                if hasattr(shape,"text"):
                    text.append(shape.text)
        return "\n".join(text)
    except Exception:
        bot.send_message(message.from_user.id,"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é –ø–æ–≤—Ç–æ—Ä–Ω–æ.")



bot = telebot.TeleBot("7429366923:AAHGpTLn2wjz7S1jr01ttdj-_Vmz00ma3l8")

@bot.message_handler(content_types=["text","document"])
def get_text_messages(message):
    if message.text == "–ü—Ä–∏–≤–µ—Ç":
        bot.send_message(message.from_user.id,"–ü—Ä–∏–≤–µ—Ç —á–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å")
    elif message.text == "–ö–∞–∫ –¥–µ–ª–∞" or message.text == "–ö–∞–∫ –¥–µ–ª–∞?":
        bot.send_message(message.from_user.id,"–£ –º–µ–Ω—è –≤—Å–µ –æ—Ç–ª–∏—á–Ω–æ,–∫–∞–∫ —É —Ç–µ–±—è?")

    elif message.text == "/help":
        bot.send_message(message.from_user.id,"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: /help  /info /image /pdf  /present")

    elif message.text == "/image":
            bot.send_message(message.from_user.id,"–í —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç –ø–æ–ª—É—á–∞–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∑–∞–≥—Ä—É–∂–∞–µ—Ç –µ–≥–æ –∏ –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç –≤–∏–∑—É–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–∑ –≤ –∏–∑—è—â–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ, —Å–æ–∑–¥–∞–≤–∞—è —Å–ª–æ–≤–µ—Å–Ω—É—é –∫–∞—Ä—Ç–∏–Ω—É, –ø–æ–Ω—è—Ç–Ω—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
            
            bot.reply_to(message,"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
            bot.register_next_step_handler(message,get_url)




    elif message.text == "/info":
        bot.send_message(message.from_user.id,"–ô–æ—É-–π–æ—É, —è —Ç—É—Ç, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å, –ø–æ–±–∞–∑–∞—Ä–∏—Ç—å –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –±—ã—Ç—å —Ç–≤–æ–∏–º —Ü–∏—Ñ—Ä–æ–≤—ã–º –±—Ä–æ! ü´° –ù–µ —Å—Ç–µ—Å–Ω—è–π—Å—è —Å–ø—Ä–æ—Å–∏—Ç—å —Ö–æ—Ç—å —á—Ç–æ ‚Äî –∏–Ω—Ñ–∞, —Å–æ–≤–µ—Ç—ã, –∏–ª–∏ –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–∞–¥–æ –ø—Ä–æ—Å—Ç–æ –ø–æ–ø–ª–∞–∫–∞—Ç—å—Å—è –≤ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –ø–ª–µ—á–æ üòé. –Ø –≤—Å–µ–≥–¥–∞ –Ω–∞ —Å–≤—è–∑–∏, –±–µ–∑ –ø–µ—Ä–µ—Ä—ã–≤–æ–≤ –Ω–∞ –∫–æ—Ñ–µ –∏ –¥—Ä–∞–º! –î–∞–≤–∞–π –¥—Ä—É–∂–∏—Ç—å ‚Äî –æ–±–µ—â–∞—é –Ω–µ –ø–∏—Å–∞—Ç—å ¬´–∫–µ–∫¬ª —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ... –Ω—É, –º–æ–∂–µ—Ç, —á—É—Ç—å-—á—É—Ç—å üëÄ.")
    
    elif message.text == "/present":
        bot.send_message(message.from_user.id,"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é")
        bot.register_next_step_handler(message,present_handler)

    elif message.text == "/pdf":
        bot.send_message(message.from_user.id,"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–¥—Ñ —Ñ–∞–π–ª")
        bot.register_next_step_handler(message,pdf_handler)


    else:
        
        try:
            response = model.generate_content(message.text)
            responseText = response.text
            replacedText = responseText.replace("*","")
            bot.send_message(message.from_user.id,replacedText)
        except Exception as e:
            bot.send_message(message.from_user.id,f"–ü—Ä–∏—à–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç:{e}")

    

def get_url(message):
    url = message.text
    if message.text == "/stop":
        bot.reply_to(message,"–í—ã –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ —Ñ—É–Ω–∫—Ü–∏—é")
        bot.register_next_step_handler(message,get_text_messages)
    else:
        try:
            responseUrl = requests.get(url)
            pictureDescribe = Image.open(BytesIO(responseUrl.content))
            responseChat = model.generate_content(["–û–ø–∏—à–∏ —ç—Ç—É –∫–∞—Ä—Ç–∏–Ω–∫—É –Ω–∞ —Ä—É—Å—Å–∫–æ–º",pictureDescribe])
            bot.send_message(message.from_user.id,responseChat.text)

        except Exception as e:
            bot.send_message(message.from_user.id,f"–ù–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π url –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ,–ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ {e}// –ù–∞–ø–∏—à–∏—Ç–µ /stop —á—Ç–æ–±—ã –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é")
            bot.register_next_step_handler(message,get_url)



@bot.message_handler(content_types=["text","document"])
def present_handler(message):
        if message.text == "/stop":
            bot.reply_to(message,"–í—ã –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ —Ñ—É–Ω–∫—Ü–∏—é")
            bot.register_next_step_handler(message,get_text_messages)
        else:
            try:
                file_info = bot.get_file(message.document.file_id)
            except Exception:
                bot.reply_to(message,"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–µ–π,–ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑")
                bot.register_next_step_handler(message,present_handler)
                return

            try:
                dowloaded_file = bot.download_file(file_info.file_path)
            except Exception as e:
                bot.reply_to(message,e)
                return
            try:

                file_name = message.document.file_name
                with open(file_name,"wb") as new_file:
                    new_file.write(dowloaded_file)

                pdftoText = presentationToText(file_name,message.from_user.id)
                response = model.generate_content(["–û–ø–∏—à–∏ —ç—Ç–æ –∫—Ä–∞—Ç–∫–æ –Ω–æ –ø–æ–¥—Ä–æ–±–Ω–æ –∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏",pdftoText])
                responseText = response.text.replace("*","")
                bot.send_message(message.from_user.id,responseText)
            except AttributeError:
                bot.send_message(message.from_user.id,"–ü—Ä–∏—à–ª–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç –≤ –≤–∏–¥–µ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏")
                bot.register_next_step_handler(message,present_handler)

            except Exception as e:
                bot.reply_to(message,e)
            

def pdf_handler(message):
    if message.text == "/stop":
        bot.reply_to(message,"–í—ã –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ —Ñ—É–Ω–∫—Ü–∏—é")
        bot.register_next_step_handler(message,get_text_messages)
    else:
        try:
            pdf_info = bot.get_file(message.document.file_id)
        except Exception as e:
            bot.reply_to(message,"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø–¥—Ñ —Ñ–∞–π–ª–æ–º")
            bot.register_next_step_handler(message,pdf_handler)
            return
        try:
            dowloaded_pdf = bot.download_file(pdf_info.file_path)
            pdf_name = message.document.file_name
            with open(pdf_name,"wb") as new_pdf:
                new_pdf.write(dowloaded_pdf)

            mime_type,_ = mimetypes.guess_type(pdf_name)
            if mime_type is None:
                mime_type = "application/pdf"



            with open(pdf_name,"rb") as pdf_file:
                sample_pdf = genai.upload_file(pdf_file,mime_type=mime_type)
        except Exception as e:
            bot.reply_to(message,e)
            return
        try:

            response = model.generate_content(["–û–ø–∏—à–∏ —ç—Ç–æ –∫—Ä–∞—Ç–∫–æ –Ω–æ –ø–æ–¥—Ä–æ–±–Ω–æ –∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏",sample_pdf])
            responseText = response.text.replace("*","")
            bot.send_message(message.from_user.id,responseText)
        except Exception as e:
            bot.reply_to(message,f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç {e}")
            bot.register_next_step_handler(message,pdf_handler)

        


bot.polling(none_stop=True,interval=0)

